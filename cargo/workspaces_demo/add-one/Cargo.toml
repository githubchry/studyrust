[package]
name = "add-one"
version = "0.1.0"
authors = ["chry <a8512413@163.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# 在工作空间中依赖外部 crate
# 工作空间只在根目录有一个 Cargo.lock，而不是在每一个 crate 目录都有 Cargo.lock。这确保了所有的 crate 都使用完全相同版本的依赖。
# 如果在 Cargo.toml 和 add-one/Cargo.toml 中都增加 rand crate，则 Cargo 会将其都解析为同一版本并记录到唯一的 Cargo.lock 中。
# 使得工作空间中的所有 crate 都使用相同的依赖意味着其中的 crate 都是相互兼容的。
rand = "0.5.5"

# 现在顶级的 Cargo.lock 包含了 add-one 的 rand 依赖的信息。
# 然而，即使 rand 被用于工作空间的某处，也不能在其他 crate 中使用它，除非也在他们的 Cargo.toml 中加入 rand。

# 例如，如果在顶级的 adder crate 的 adder/src/main.rs 中增加 use rand;，会得到一个错误： no external crate `rand`
# 为了修复这个错误，修改顶级 adder crate 的 Cargo.toml 来表明 rand 也是这个 crate 的依赖。
# 构建 adder crate 会将 rand 加入到 Cargo.lock 中 adder 的依赖列表中，但是这并不会下载 rand 的额外拷贝。

# Cargo 确保了工作空间中任何使用 rand 的 crate 都采用相同的版本。
# 在整个工作空间中使用相同版本的 rand 节省了空间，因为这样就无需多个拷贝并确保了工作空间中的 crate 将是相互兼容的。
# 需要注意的是，如果两者依赖的rand版本不一样，工作空间还是会将两者区分开来，分别下载两个版本
# 比如rand = "0.5.5" 和 rand = "0.8.3"