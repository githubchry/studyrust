/*
cargo test默认会执行 单元测试 和 继承测试
我们仍然可以通过指定测试函数的名称作为 cargo test 的参数来运行特定集成测试。
也可以使用 cargo test 的 --test 后跟文件的名称来运行某个特定集成测试文件中的所有测试：
cargo test integration_test


与单元测试不同，我们需要在文件顶部添加 use hello_test。
这是因为每一个 tests 目录中的测试文件都是完全独立的 crate，所以需要在每一个文件中导入库。

并不需要将 tests/integration_test.rs 中的任何代码标注为 #[cfg(test)]。
tests 文件夹在 Cargo 中是一个特殊的文件夹， Cargo 只会在运行 cargo test 时编译这个目录中的文件。
*/
use hello_test;


// ========================================================================
// 集成测试中的子模块
// ========================================================================
/*
随着集成测试的增加，你可能希望在 tests 目录增加更多文件以便更好的组织他们，例如根据测试的功能来将测试分组。
正如我们之前提到的，每一个 tests 目录中的文件都被编译为单独的 crate。

将每个集成测试文件当作其自己的 crate 来对待，这更有助于创建单独的作用域，这种单独的作用域能提供更类似与最终使用者使用 crate 的环境。
然而，tests 目录中的文件不能像 src 中的文件那样共享相同的行为。

当你有一些在多个集成测试文件都会用到的帮助函数，而你尝试将他们提取到一个通用的模块中时， tests 目录中不同文件的行为就会显得很明显。
例如，如果我们可以创建 一个tests/common.rs 文件并创建一个名叫 setup 的函数，我们希望这个函数能被多个测试文件的测试函数调用：

文件名: tests/common.rs
    pub fn setup() {
        // 编写特定库测试所需的代码
    }

如果再次运行测试，将会在测试结果中看到一个新的对应 common.rs 文件的测试结果部分，即便这个文件并没有包含任何测试函数，也没有任何地方调用了 setup 函数

我们并不想要common 出现在测试结果中显示 running 0 tests 。我们只是希望其能被其他多个集成测试文件中调用罢了。

为了不让 common 出现在测试输出中，我们将创建 tests/common/mod.rs ，而不是创建 tests/common.rs 。
这是一种 Rust 的命名规范，这样命名告诉 Rust 不要将 common 看作一个集成测试文件。
将 setup 函数代码移动到 tests/common/mod.rs 并删除 tests/common.rs 文件之后，测试输出中将不会出现这一部分。
tests 目录中的子目录不会被作为单独的 crate 编译或作为一个测试结果部分出现在测试输出中。

一旦拥有了 tests/common/mod.rs，就可以将其作为模块以便在任何集成测试文件中使用。
*/
mod common;

#[test]
fn it_adds_two() {

    common::setup();

    assert_eq!(4, hello_test::add_two(2));
}

// ========================================================================
// 二进制 crate 的集成测试
// ========================================================================
/*
如果项目是二进制 crate 并且只包含 src/main.rs 而没有 src/lib.rs，
这样就不可能在 tests 目录创建集成测试并使用 extern crate 导入 src/main.rs 中定义的函数。
只有库 crate 才会向其他 crate 暴露了可供调用和使用的函数；二进制 crate 只意在单独运行。

为什么 Rust 二进制项目的结构明确采用 src/main.rs 调用 src/lib.rs 中的逻辑的方式？
因为通过这种结构，集成测试 就可以 通过 extern crate 测试库 crate 中的主要功能了，
而如果这些重要的功能没有问题的话，src/main.rs 中的少量代码也就会正常工作且不需要测试。
*/