// Rust 不关心函数定义于何处，只要定义了就行，函数签名中必须声明每个参数的类型

fn add(x: i32, y: i32) -> i32 {
    println!("{} + {}", x, y);
    x + y // 返回值，结尾没有分号
}

fn main() {
    let n = add(4, 8);
    println!("{}", n);
    println!("{}", minus(4, 8));

    // 包含语句和表达式的函数体
    let y = {
        let x = 3;
        x + 1
    };
    println!("{}", y);

    // 匿名函数与闭包
    // 闭包最大的特点是：可以访问上下文环境中（闭包之外，调用闭包的函数之内）的自由变量。
    let add = |i: i32, j: i32| -> i32 {i + j + n};
    assert_eq!(17, add(3, 4));  //   断言 add(3, 4) = 17，实际上是19，所以报错
}

fn minus(x: i32, y: i32) -> i32 {
    println!("{} - {}", x, y);
    x - y // 返回值，结尾没有分号
}
